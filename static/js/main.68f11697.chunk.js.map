{"version":3,"sources":["component/topbar.js","component/indexPanel.js","component/about.js","component/container.js","App.js","serviceWorker.js","index.js"],"names":["TopBar","classes","this","props","react_default","a","createElement","AppBar_default","className","root","color","Typography_default","variant","style","Component","withStyles","flexGrow","textAlign","padding","backgroundColor","height","position","linklist","width","overflow","content","map","link","right","about","App","topbar","indexPanel","container","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sOAiBMA,mLACM,IACIC,EAAYC,KAAKC,MAAjBF,QACR,OACIG,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAQG,UAAaP,EAAQQ,KAAMC,MAAM,WACrCN,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAYO,QAAQ,KAAKC,MAAO,CAACH,MAAM,UAAvC,yBANCI,aAgBNC,uBA3BA,CACXN,KAAM,CACJO,SAAU,EACVC,UAAW,SACXC,QAAS,SACTC,gBAAiB,YACjBC,OAAQ,MACRC,SAAS,WAoBAN,CAAmBf,GCjB5BsB,EAAW,CACb,QACA,aACA,cACA,cACA,gBACA,gBAmBWP,2BApCA,CACXN,KAAM,CACFc,MAAM,MACNJ,gBAAgB,UAChBC,OAAQ,OACRI,SAAS,SACTH,SAAS,QACTH,QAAQ,QA6BDH,CAff,SAAoBZ,GAAM,IACfF,EAAWE,EAAXF,QACDwB,EAAUH,EAASI,IAAI,SAACC,GAAD,OACzBvB,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAYO,QAAQ,MAAMe,KAE9B,OACIvB,EAAAC,EAAAC,cAAA,OAAKE,UAAWP,EAAQQ,MACpBgB,KCJGV,2BAvBA,CACXN,KAAO,CACHQ,UAAU,WAqBHF,CAjBf,SAAeZ,GAAM,IACVF,EAAWE,EAAXF,QACP,OACIG,EAAAC,EAAAC,cAAA,OAAKE,UAAWP,EAAQQ,MACpBL,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAYO,QAAQ,MAApB,SACAR,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAYO,QAAQ,MAApB,4EAC6ER,EAAAC,EAAAC,cAAA,WAD7E,+EAEgFF,EAAAC,EAAAC,cAAA,eCW7ES,2BAxBA,CACXN,KAAM,CACFU,gBAAgB,YAChBI,MAAM,MACNH,OAAO,OACPC,SAAS,QACTO,MAAM,EACNJ,SAAS,OACTN,QAAQ,QAgBDH,CAbf,SAAmBZ,GAAM,IACdF,EAAWE,EAAXF,QACP,OACIG,EAAAC,EAAAC,cAAA,OAAKE,UAAWP,EAAQQ,MACpBL,EAAAC,EAAAC,cAACuB,EAAD,SCDGC,mLAZX,OACE1B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACyB,EAAD,MACA3B,EAAAC,EAAAC,cAAA,OAAKO,MAAO,CAACO,OAAO,OAAQC,SAAS,UACnCjB,EAAAC,EAAAC,cAAC0B,EAAD,MACA5B,EAAAC,EAAAC,cAAC2B,EAAD,eAPQnB,aCMEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.68f11697.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport PropTypes from 'prop-types';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = {\r\n    root: {\r\n      flexGrow: 1,\r\n      textAlign: 'center',\r\n      padding: '1.25em',\r\n      backgroundColor: 'lightgray',\r\n      height: '5em',\r\n      position:'static',\r\n    },\r\n  };\r\n\r\nclass TopBar extends Component{\r\n    render(){\r\n        const { classes } = this.props;\r\n        return(\r\n            <div>\r\n                <AppBar className = {classes.root} color='primary'> \r\n                    <Typography variant='h4' style={{color:'white'}}>CoCoRaHS API</Typography>\r\n                </AppBar>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nTopBar.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n  };\r\nexport default withStyles(styles)(TopBar)\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = {\r\n    root: {\r\n        width:'20%',\r\n        backgroundColor:'#FCFED5',\r\n        height: '100%',\r\n        overflow:'hidden',\r\n        position:'fixed',\r\n        padding:'2em',\r\n    },\r\n}\r\n\r\nconst linklist = [\r\n    'About',\r\n    'Parameters',\r\n    'Example One',\r\n    'Example Two',\r\n    'Example Three',\r\n    'Example Four',\r\n]\r\n\r\n\r\nfunction IndexPanel(props){\r\n    const {classes} = props;\r\n    const content = linklist.map((link)=>\r\n        <Typography variant='h5'>{link}</Typography>\r\n    );\r\n    return(\r\n        <div className={classes.root}>\r\n           {content} \r\n        </div>\r\n    );\r\n}\r\nIndexPanel.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n  };\r\n\r\nexport default withStyles(styles)(IndexPanel)","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst styles = {\r\n    root : {\r\n        textAlign:'center',\r\n    }\r\n}\r\n\r\nfunction About(props){\r\n    const {classes} = props\r\n    return(\r\n        <div className={classes.root}>\r\n            <Typography variant='h3'>About</Typography>\r\n            <Typography variant='h6'>\r\n                This page is for gathering CoCoRaHS data using the API documented below. <br></br>\r\n                Examples will be given using cURL, Python, Javascript, Java, R, and Matlab. <br></br>\r\n            </Typography>\r\n        </div>\r\n    );\r\n}\r\n\r\nAbout.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n  };\r\n\r\nexport default withStyles(styles)(About)","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport About from './about';\r\n\r\nconst styles = {\r\n    root: {\r\n        backgroundColor:'lightblue',\r\n        width:'80%',\r\n        height:'100%',\r\n        position:'fixed',\r\n        right:0,\r\n        overflow:'auto',\r\n        padding:'2em'\r\n    },\r\n}\r\nfunction Container(props){\r\n    const {classes} = props;\r\n    return(\r\n        <div className={classes.root}>\r\n            <About/>\r\n        </div>\r\n    );\r\n} \r\n\r\nContainer.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n  };\r\n\r\nexport default withStyles(styles)(Container)","import React, { Component } from 'react';\nimport './App.css';\nimport TopBar from './component/topbar';\nimport IndexTab from './component/indexPanel';\nimport Container from './component/container';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <TopBar/>\n        <div style={{height:'100%', position:'fixed'}}>\n          <IndexTab/>\n          <Container/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}